5. Implementação do Raycasting e Renderização
Objetivo: Desenhar o mundo 3D na sua imagem de buffer.

Detalhes:

Loop Principal: A função que contém a lógica de renderização será registrada usando mlx_loop_hook.

Função de Renderização: Dentro desta função:

Itere por cada coluna de pixels da tela (de x = 0 até a largura da janela).

Calcule a direção do raio para a coluna x atual.

Algoritmo DDA: Percorra a grade do mapa passo a passo, seguindo o raio, até atingir uma parede.

Calcule a Distância: Determine a distância perpendicular do jogador até a parede para evitar o efeito "olho de peixe".

Calcule a Altura da Parede: Com base na distância, calcule a altura da fatia vertical da parede a ser desenhada na tela.

Desenhe o Cenário:

Desenhe uma linha vertical para o teto com a cor que você preparou.

Desenhe a fatia da parede, aplicando a textura correta (veja o próximo passo).

Desenhe uma linha vertical para o chão com a cor apropriada.

Exibição na Tela: Após desenhar o frame inteiro na sua imagem de buffer, chame mlx_put_image_to_window para copiar o buffer para a janela de uma só vez.

---------------------------------------------------------------


6. Mapeamento de Texturas (Lógica Matemática)
Objetivo: Aplicar a textura correta na fatia de parede desenhada.

Detalhes:

Quando o raio atinge uma parede, determine qual textura usar (Norte, Sul, Leste ou Oeste).

Calcule o ponto exato (wallX) onde o raio atingiu a parede (um valor entre 0.0 e 1.0).

Use wallX para encontrar a coluna da textura (texX) a ser usada.

Ao desenhar a fatia vertical da parede na tela, para cada pixel, calcule a coordenada Y correspondente na textura (texY) e copie a cor da textura para a sua imagem de buffer.

---------------------------------------------------------------

7. Controles do Jogador (minilibx)
Objetivo: Permitir que o jogador se mova pelo cenário.

Detalhes:

mlx_hook (ou a mais simples mlx_key_hook): Registre uma função para ser chamada sempre que uma tecla for pressionada.

Dentro da função de hook, verifique o keycode da tecla pressionada:

Movimento (W, S, A, D): Altere as coordenadas posX e posY do jogador, sempre verificando se a nova posição não está dentro de uma parede (detecção de colisão).

Rotação (Setas ←, →): Gire o vetor de direção e o plano da câmera do jogador usando uma matriz de rotação.

---------------------------------------------------------------

8. Gerenciamento de Memória e Encerramento (minilibx)
Objetivo: Sair do programa de forma limpa, liberando todos os recursos.

Detalhes:

mlx_hook: Registre uma função para o evento de fechar a janela (o "X" vermelho). O nome do evento é DestroyNotify (código 17).

Função de Saída: Nesta função, você deve:

Liberar todas as suas alocações manuais (free).

mlx_destroy_image: Chame esta função para cada imagem que você criou (o buffer principal e as quatro texturas).

mlx_destroy_window: Destrua a janela.

mlx_destroy_display: Libere a conexão com o sistema gráfico.

Chame exit(0).